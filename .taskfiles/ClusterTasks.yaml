---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:

  verify:
    desc: Verify flux meets the prerequisites
    cmd: flux check --pre

  install:
    desc: Install Flux into your cluster
    cmds:
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/bootstrap
      - |
        kubectl delete secret sops-age -n flux-system --ignore-not-found \
        && cat {{.SOPS_AGE_KEY_FILE}} |
           kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/custom-secrets.sops.yaml | kubectl apply -f -
      - kubectl apply -f {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - kubectl apply -f {{.KUBERNETES_DIR}}/flux/vars/custom-settings.yaml
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Age key file is not found. Did you forget to create it?
    vars:
      SOPS_AGE_KEY_FILE: "{{.ROOT_DIR}}/age.key"

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmds:
      - flux reconcile kustomization cluster -n flux-system --with-source
      - flux reconcile kustomization apps -n flux-system

  bounce-hr:
    desc: Suspend and resume helmrelease
    aliases: ["hr-bounce"]
    cmds:
      - flux suspend hr -n {{.ns}} {{.hr}}
      - sleep 5
      - flux resume hr -n {{.ns}} {{.hr}}
    vars:
      hr: '{{ or .hr (fail "HelmRelease `hr` is required") }}'
      ns: '{{.ns | default "default"}}'

  bounce-ks:
    desc: Suspend and resume kustomization
    aliases: ["ks-bounce"]
    cmds:
      - flux suspend kustomization -n {{.ns}} {{.ks}}
      - sleep 5
      - flux resume kustomization -n {{.ns}} {{.ks}}
    vars:
      ks: '{{ or .ks (fail "Kustomization `ks` is required") }}'
      ns: '{{.ns | default "flux-system"}}'

  bounce-failed-hr:
    desc: Restart all failed helmreleases
    cmds:
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux suspend hr $0 -n $1'
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux resume hr $0 -n $1'

  bounce-failed-ks:
    desc: Restart all failed kustomizations
    cmds:
      - kubectl get kustomization --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux suspend kustomization $0 -n $1'
      - kubectl get kustomization --all-namespaces | grep False | awk '{print $2, $1}' | xargs -L1 bash -c 'flux resume kustomization $0 -n $1'

  resume-all-hr:
    desc: Resume suspended helmreleases
    cmds:
      - for: { var: suspended_hr, as: HR, split: "\n" }
        cmd: |
          echo '{{.HR}}' |
          xargs -L1 bash -c 'flux resume hr "$0" -n "$1"'
    vars:
      suspended_hr:
        sh: |
          kubectl get helmreleases --all-namespaces -o json |
          jq -rc '.items[] |
            select(.spec.suspend) |
            [.metadata.name, .metadata.namespace] |
          @tsv'
    status:
      - 'test -z "{{.suspended_hr}}"'

  resume-all-ks:
    desc: Resume suspended kustomizations
    cmds:
      - for: { var: suspended_ks, as: KS, split: "\n" }
        cmd: |
          echo '{{.KS}}' |
          xargs -L1 bash -c 'flux resume kustomization "$0" -n flux-system'
    vars:
      suspended_ks:
        sh: |
          kubectl get kustomization -n flux-system -o json |
          jq -rc '.items[] |
            select(.spec.suspend) |
            .metadata.name
          '
    status:
      - 'test -z "{{.suspended_ks}}"'

  # TODO: specify status for delete
  # delete-jobs:
  #   desc: Delete all jobs
  #   cmd: kubectl delete job --all-namespaces --all

  ns-cleanup:
    desc: Force terminate all namespaces stuck with finalizers
    cmds:
      - for: { var: terminating, as: NS, split: "\n" }
        cmd: |
          kubectl patch ns '{{.NS}}' --type merge --patch='{"spec":{"finalizers": []}}'
    vars:
      terminating:
        sh: |
          kubectl get namespaces -o json |
          jq -r '.items[] | select(.status.phase=="Terminating") |
          .metadata.name
          '
    status:
      - 'test -z "{{.terminating}}"'
