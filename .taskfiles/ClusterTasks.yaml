---
version: "3"

tasks:
  verify:
    desc: Verify flux meets the prerequisites
    cmds:
      - flux check --pre

  install:
    desc: Install Flux into your cluster
    cmds:
      - zsh {{.KUBERNETES_DIR}}/apps/tigera-operator/give_helm_ownership.sh
      - zsh {{.KUBERNETES_DIR}}/apps/kube-system/local-path-provisioner/give_helm_ownership.sh
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/bootstrap
      - cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age
        --from-file=age.agekey=/dev/stdin
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/github-deploy-key.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | kubectl apply -f -
      - kubectl apply -f {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
      - sleep 30
      - task: reconcile
    preconditions:
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Age key file is not found. Did you forget to create it?
    vars:
      SOPS_AGE_KEY_FILE: "$HOME/Library/Application\\ Support/sops/age/keys.txt"

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmds:
      - flux reconcile -n flux-system source git homelab-gitops-k3s
      - flux reconcile -n flux-system kustomization flux-cluster

  dashpass:
    desc: Get secret for kubernetes-dashboard login
    cmds:
      - >-
        kubectl -n monitoring get secret kubernetes-dashboard -o jsonpath='{.data.token}' | base64 --decode | pbcopy
      - echo "Token is in clipboard ready to paste!"

  cephpass:
    desc: Get secret for rook-ceph dashboard login
    cmds:
      - >-
        kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath='{.data.password}' | base64 --decode |
        pbcopy
      - echo "Token is in clipboard ready to paste!"

  gr-sync:
    desc: Sync Flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --all-namespaces --no-headers \
          | awk '{print $1, $2}' \
          | xargs -P 4 bash -c \
            'kubectl -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) \
            --field-manager=flux-client-side-apply \
            --overwrite'

  ks-sync:
    desc: Sync Flux Kustomizations
    cmds:
      - |
        kubectl get kustomization --all-namespaces --no-headers \
          | awk '{print $1, $2}' \
          | xargs -P 4 bash -c \
            'kubectl -n $0 annotate kustomization/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" \
            --field-manager=flux-client-side-apply \
            --overwrite'

  ks-bounce:
    desc: Suspend and resume kustomization
    cmds:
      - flux suspend kustomization -n {{.namespace}} {{.ks}}
      - sleep 5
      - flux resume kustomization -n {{.namespace}} {{.ks}}
    vars:
      ks: '{{ or .ks (fail "Kustomization `ks` is required") }}'
      namespace: '{{.namespace | default "flux-system"}}'

  hr-sync:
    desc: Sync Flux HelmReleases
    cmds:
      - |
        kubectl get helmreleases --all-namespaces --no-headers \
          | awk '{print $1, $2}' \
          | xargs -P 4 bash -c \
            'kubectl -n $0 annotate helmrelease/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  hr-bounce:
    desc: Suspend and resume helmrelease
    cmds:
      - flux suspend hr -n {{.namespace}} {{.release}}
      - sleep 5
      - flux resume hr -n {{.namespace}} {{.release}}
    vars:
      release: '{{ or .release (fail "HelmRelease `release` is required") }}'
      namespace: '{{.namespace | default "default"}}'

  hr-suspend:
    desc: Suspend all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header \
          | awk '{print $1, $2}' \
          | xargs bash -c 'flux -n $0 suspend helmrelease $1'

  hr-resume:
    desc: Resume all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header \
          | awk '{print $1, $2}' \
          | xargs bash -c 'flux -n $0 resume helmrelease $1'

  hr-fix:
    cmds:
      - kubectl -n {{.namespace}} delete secret -l owner=helm,name={{.release}},status=pending-upgrade
      - flux -n {{.namespace}} reconcile hr {{.release}}
    vars:
      release: '{{ or .release (fail "HelmRelease `release` is required") }}'
      namespace: '{{.namespace | default "default"}}'

  delete-jobs:
    desc: Delete all jobs
    cmds:
      - kubectl delete job -A --all

  ns-cleanup:
    desc: Force terminate all namespaces stuck with finalizers
    cmds:
      - |
        function ns_cleanup {
        declare -a terminating=( \
          $(kubectl get ns -o json | \
            jq '.items[] | select(.status.phase=="Terminating") | (.metadata.name)' | \
            xargs -n1) \
            )
        for ns in "${terminating[@]}"; do
          echo "$ns"
          kubectl get ns "$ns"  -o json | \
            jq '.spec.finalizers = []' | \
            kubectl replace --raw "/api/v1/namespaces/$ns/finalize" -f -
        done
        unset terminating
        }
        ns_cleanup

  ks-deploy:
    desc: Deploy from local (for testing)
    cmds:
      - |
        # Export vars in the config and secret files to the current env
        while read -r line; do
          # skip comments
          [[ "$line" = \#* ]] && continue;
          declare -x "${line}";
        done < <(sops -d "{{.cluster_secret_file}}" | yq eval '.stringData' - | sed 's/: /=/g')

        while read -r line; do
          # skip comments
          [[ "$line" = \#* ]] && continue;
          declare -x "${line}";
        done < <(yq eval '.data' "{{.cluster_config_file}}" | sed 's/: /=/g')

        # Build the manifests in ks_path, substitute env with the variables and then apply to the cluster
        kustomize build --load-restrictor=LoadRestrictionsNone "{{.ks_path}}" \
            | envsubst \
                | kubectl apply --server-side -f -
    vars:
      cluster_secret_file: '{{.cluster_secret_file | default "./kubernetes/flux/vars/cluster-secrets.sops.yaml"}}'
      cluster_config_file: '{{.cluster_config_file | default "./kubernetes/flux/vars/cluster-settings.yaml"}}'
      ks_path: '{{ or .ks_path (fail "kustomization `ks_path` is required") }}'

  ks-undeploy:
    desc: Revert deployment from local (for testing)
    cmds:
      - |
        # Export vars in the config and secret files to the current env
        while read -r line; do
          # skip comments
          [[ "$line" = \#* ]] && continue;
          declare -x "${line}";
        done < <(sops -d "{{.cluster_secret_file}}" | yq eval '.stringData' - | sed 's/: /=/g')

        while read -r line; do
          # skip comments
          [[ "$line" = \#* ]] && continue;
          declare -x "${line}";
        done < <(yq eval '.data' "{{.cluster_config_file}}" | sed 's/: /=/g')

        # Build the manifests in ks_path, substitute env with the variables and then apply to the cluster
        kustomize build --load-restrictor=LoadRestrictionsNone "{{.ks_path}}" \
            | envsubst \
                | kubectl delete -f -
    vars:
      cluster_secret_file: '{{.cluster_secret_file | default "./kubernetes/flux/vars/cluster-secrets.sops.yaml"}}'
      cluster_config_file: '{{.cluster_config_file | default "./kubernetes/flux/vars/cluster-settings.yaml"}}'
      ks_path: '{{ or .ks_path (fail "kustomization `ks_path` is required") }}'
