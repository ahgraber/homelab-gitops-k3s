# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: "3"

vars:
  PYTHON_BIN: python3
  ANSIBLE_LINT_FILE: "{{ .ROOT_DIR }}/.ansible-lint"
  ANSIBLE_INVENTORY_FILE: "{{ .ANSIBLE_DIR }}/inventory/hosts.yaml"
  ANSIBLE_REQUIREMENTS_FILE: "{{ .ANSIBLE_DIR }}/requirements.yaml"
  ANSIBLE_PIP_REQUIREMENTS_FILE: "{{ .ANSIBLE_DIR }}/requirements.txt"

env:
  ANSIBLE_CONFIG: "{{ .ANSIBLE_DIR }}/ansible.cfg"
  # ANSIBLE_LOCALHOST_WARNING: "False"
  # ANSIBLE_INVENTORY_UNPARSED_WARNING: "False"

tasks:

  install:
    desc: Install Ansible with uv
    cmds:
      - |
        bash -eu -o pipefail <<'EOF'
        # Reinstall the ansible tool including any extra Python libs from requirements.txt
        # This replaces the previous pipx runpip invocation.
        reqs_file="{{ .ANSIBLE_PIP_REQUIREMENTS_FILE }}"
        extra_args=()
        while IFS= read -r line; do
          # Skip blank lines and comments
          [ -z "${line}" ] && continue
          case "${line}" in \#*) continue ;; esac
          extra_args+=(--with "${line}")
        done < "${reqs_file}"

        # Log what we parsed (pairs of --with <requirement>)
        if [ ${#extra_args[@]} -gt 0 ]; then
          echo "[ansible:install] Parsed extra requirements (shown as --with <req>):" >&2
          echo "[ansible:install] ${extra_args[*]}" >&2
          # Also list just the requirement strings for readability
          echo "[ansible:install] Requirement list:" >&2
          for ((i=1; i<${#extra_args[@]}; i+=2)); do
            echo "  - ${extra_args[i]}" >&2
          done
        else
          echo "[ansible:install] No extra requirements found in ${reqs_file}" >&2
        fi

        # Perform a forced install so changes in requirements are applied.
        if [ ${#extra_args[@]} -gt 0 ]; then
          uv tool install --force --with-executables-from ansible-core,ansible-lint "${extra_args[@]}" ansible
        else
          uv tool install --force --with-executables-from ansible-core,ansible-lint ansible
        fi
        EOF
      - ansible-galaxy install --force --role-file "{{ .ANSIBLE_REQUIREMENTS_FILE }}"
    preconditions:
      - sh: command -v uv
        msg: |
          uv is not installed.
          Head over to https://docs.astral.sh/uv/getting-started/installation/ to get up and running.

  # deps:
  #   desc: Set up Ansible dependencies
  #   deps: [":workstation:deps"] #, ":workstation:venv"]
  #   cmds:
  #     - '{{ .VIRTUAL_ENV }}/bin/python3 -m pip install --upgrade pip setuptools wheel'
  #     - '{{ .VIRTUAL_ENV }}/bin/python3 -m pip install --upgrade --requirement "{{ .ANSIBLE_PIP_REQUIREMENTS_FILE }}"'
  #     - '{{ .VIRTUAL_ENV }}/bin/ansible-galaxy install --role-file "{{ .ANSIBLE_REQUIREMENTS_FILE }}" {{ if eq .force "true" }}--force{{ end }}'
  #   preconditions:
  #     - { msg: "Missing Pip requirements file", sh: "test -f {{ .ANSIBLE_PIP_REQUIREMENTS_FILE }}" }
  #     - { msg: "Missing Ansible requirements file", sh: "test -f {{ .ANSIBLE_REQUIREMENTS_FILE }}" }
  #   sources:
  #     - "{{ .ANSIBLE_PIP_REQUIREMENTS_FILE }}"
  #     - "{{ .ANSIBLE_REQUIREMENTS_FILE }}"
  #   generates:
  #     - "{{ .VIRTUAL_ENV }}/bin/ansible"
  #     - "{{ .VIRTUAL_ENV }}/bin/ansible-galaxy"
  #   vars:
  #     force: '{{ .force | default "true" }}'

  hosts:
    desc: List all the hosts in inventory
    cmd: ansible all -i {{ .ANSIBLE_DIR }}/inventory --list-hosts
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}

  ping:
    desc: Ping specified hosts
    cmds:
      - ansible -i {{ .ANSIBLE_DIR }}/inventory {{ .group }} --one-line -m 'ping'
    vars:
      group: '{{ .group | default "kubernetes" }}'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}

  uptime:
    desc: Uptime of specified hosts
    cmd: ansible -i {{ .ANSIBLE_DIR }}/inventory {{ .group }} --one-line -a 'uptime'
    vars:
      group: '{{ .group | default "kubernetes" }}'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}

  prepare:
    desc: Prepare nodes for k3s
    dir: "{{ .ANSIBLE_DIR }}"
    cmd: ansible-playbook -i {{ .ANSIBLE_DIR }}/inventory -l {{ .group }} {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml --become
    vars:
      group: '{{ .group | default "kubernetes" }}'
      playbook: 'k3s-prepare'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}
      - test -f {{ .ANSIBLE_DIR }}/inventory/hosts.yaml
      - test -f {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml

  _k3s_install:
    desc: Install k3s
    internal: true
    prompt: This will install k3s ... continue?
    dir: "{{ .ANSIBLE_DIR }}"
    cmd: ansible-playbook -i {{ .ANSIBLE_DIR }}/inventory -l {{ .group }} {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml --become
    vars:
      group: '{{ .group | default "kubernetes" }}'
      playbook: 'k3s-install'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}
      - test -f {{ .ANSIBLE_DIR }}/inventory/hosts.yaml
      - test -f {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml

  _k3s_stop:
    internal: true
    desc: Stop k3s process (safely)
    prompt: This will stop k3s (without uninstalling) ... continue?
    dir: "{{ .ANSIBLE_DIR }}"
    cmd: ansible-playbook -i {{ .ANSIBLE_DIR }}/inventory -l {{ .group }} {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml --become
    vars:
      group: '{{ .group | default "kubernetes" }}'
      playbook: 'k3s-stop'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}
      - test -f {{ .ANSIBLE_DIR }}/inventory/hosts.yaml
      - test -f {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml

  _k3s_nuke:
    internal: true
    desc: Uninstall k3s
    dir: "{{ .ANSIBLE_DIR }}"
    cmd: ansible-playbook -i {{ .ANSIBLE_DIR }}/inventory -l {{ .group }} {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml --become
    vars:
      group: '{{ .group | default "kubernetes" }}'
      playbook: 'k3s-nuke'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}
      - test -f {{ .ANSIBLE_DIR }}/inventory/hosts.yaml
      - test -f {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml

  list:
    desc: List all available Ansible playbooks
    dir: "{{ .ANSIBLE_DIR }}"
    cmd: |
      find {{ .ANSIBLE_DIR }}/playbooks -maxdepth 1 -type f \
        \( -name "*.yaml" -o -name "*.yml" \) \
        -exec basename {} \; |
        sort
    preconditions:
      - sh: "test -d {{ .ANSIBLE_DIR }}/playbooks"
        msg: "Error, could not find playbook directory '{{ .ANSIBLE_DIR }}/playbooks'"

  playbook:
    desc: Run an Ansible playbook by name
    summary: |
      Args:
        playbook: Playbook to run (required)
      E.g.,
      task ansible:playbook playbook='k3s-prepare'
      task ansible:playbook playbook='k3s-install' -- '--become'
    prompt: Run Ansible playbook '{{ .playbook }}' ... continue?
    dir: "{{ .ANSIBLE_DIR }}"
    cmd: ansible-playbook -i {{ .ANSIBLE_DIR }}/inventory -l {{ .group }} {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml {{ .CLI_ARGS }}
    requires:
      vars: ["playbook"]
    vars:
      group: '{{ .group | default "kubernetes" }}'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}
      - test -f {{ .ANSIBLE_DIR }}/inventory/hosts.yaml
      - test -f {{ .ANSIBLE_DIR }}/playbooks/{{ .playbook }}.yaml

  cmd:
    desc: Run an arbitrary command
    summary: |
      E.g.,
      task ansible:cmd cmd="apt update && apt upgrade -y"
      task ansible:cmd cmd="apt update && apt upgrade -y" -- '--become'
    cmds:
      # - echo "{{ .CLI_ARGS }}"
      - ansible -i {{ .ANSIBLE_DIR }}/inventory {{ .group }} -m ansible.builtin.shell -a "{{ .cmd }}" {{ .CLI_ARGS }}
    requires:
      vars: ["cmd"]
    vars:
      group: '{{ .group | default "kubernetes" }}'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}

  shutdown:
    desc: Shut down the cluster
    prompt: This will shut down the cluster ... continue?
    dir: "{{ .ANSIBLE_DIR }}"
    cmds:
      - task: _k3s_stop
      - ansible -i {{ .ANSIBLE_DIR }}/inventory {{ .group }} -m ansible.builtin.shell -a "shutdown now" --become
    vars:
      group: '{{ .group | default "kubernetes" }}'
    preconditions:
      - {msg: "Ansible not found", sh: "type ansible"}
      - test -f {{ .ANSIBLE_DIR }}/inventory/hosts.yaml
