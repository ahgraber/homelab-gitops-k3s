{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"ansible/","title":"Ansible","text":"<ul> <li>Ansible</li> <li>Call arbitrary playbooks<ul> <li>With ansible</li> <li>With task</li> </ul> </li> <li>Send arbitrary commands<ul> <li>With ansible</li> <li>With task</li> </ul> </li> </ul>"},{"location":"ansible/#call-arbitrary-playbooks","title":"Call arbitrary playbooks","text":""},{"location":"ansible/#with-ansible","title":"With ansible","text":"<pre><code># paths assume running from /ansible dir\ncd ./ansible\nansible-playbook -i &lt;path/to/inventory&gt; -l &lt;groupname&gt; &lt;path/to/playbook&gt; --become\n# e.g.\n# &gt; ansible-playbook -i ./inventory -l ubuntu ./playbooks/cluster-reboot.yaml --become\n</code></pre>"},{"location":"ansible/#with-task","title":"With task","text":"<pre><code>task ansible:run group='kubernetes' playbook='k3s-reboot' -- '--become'\n</code></pre>"},{"location":"ansible/#send-arbitrary-commands","title":"Send arbitrary commands","text":""},{"location":"ansible/#with-ansible_1","title":"With ansible","text":"<pre><code># paths assume running from /ansible dir\ncd ./ansible\nansible -i &lt;path/to/inventory&gt; -l &lt;groupname&gt; -m ansible.builtin.shell -a &lt;shell command&gt; --become\n# e.g.\n# &gt; ansible -i ./inventory -l &lt;groupname&gt; -m ansible.builtin.shell -a \"apt upgrade -y\" --become\n</code></pre>"},{"location":"ansible/#with-task_1","title":"With task","text":"<pre><code>task ansible:cmd group='kubernetes' cmd='apt upgrade -y' -- '--become'\n</code></pre>"},{"location":"node-prep/","title":"\ud83d\udcbb Machine Preparation","text":""},{"location":"node-prep/#system-requirements","title":"System requirements","text":"<p>\ud83d\udccd k3s default behaviour is that all nodes are able to run workloads, including control nodes. Worker nodes are therefore optional.</p> <p>\ud83d\udccd If you have 3 or more nodes it is strongly recommended to make 3 of them control nodes for a highly available control plane.</p> <p>\ud83d\udccd Ideally you will run the cluster on bare metal machines.</p> Role Cores Memory System Disk Control 4 (6*) 8GB (24GB*) 100GB (500GB*) SSD/NVMe Worker 4 (6*) 8GB (24GB*) 100GB (500GB*) SSD/NVMe * recommended"},{"location":"node-prep/#debian-for-amd64","title":"Debian for AMD64","text":"<ol> <li>Download the latest stable release of Debian, then follow this guide to get it installed.</li> </ol> <p>Deviations from the guide:</p> <p><code>txt Choose \"Guided - use entire disk\" Choose \"All files in one partition\" Delete Swap partition Uncheck all Debian desktop environment options</code></p> <ol> <li>[Post install] Remove CD/DVD as apt source</li> </ol> <p><code>sh    su -    sed -i '/deb cdrom/d' /etc/apt/sources.list    apt update    exit</code></p> <ol> <li>[Post install] Enable sudo for your non-root user</li> </ol> <p><code>sh    su -    apt update    apt install -y sudo    usermod -aG sudo ${username}    echo \"${username} ALL=(ALL) NOPASSWD:ALL\" | tee /etc/sudoers.d/${username}    exit    newgrp sudo    sudo apt update</code></p> <ol> <li>[Post install] Add SSH keys (or use <code>ssh-copy-id</code> on the client that is connecting)</li> </ol> <p>a. Add with <code>ssh-copy-id</code></p> <p><code>sh    ssh-copy-id -i ~/.ssh/id_ed25519 &lt;user&gt;@&lt;host&gt;</code></p> <p>b. Add with github</p> <p>\ud83d\udccd First make sure your ssh keys are up-to-date and added to your github account as instructed.</p> <p><code>sh    mkdir -m 700 ~/.ssh    sudo apt install -y curl    curl https://github.com/${github_username}.keys &gt; ~/.ssh/authorized_keys    chmod 600 ~/.ssh/authorized_keys</code></p>"},{"location":"nosleep-remote/","title":"Preventing Sleep on Debian When Network Connections Are Active","text":"<p>When running remote servers or SSH-accessible systems, you don't want your Debian machine to suspend while you're connected or performing remote tasks.</p> <p>This guide covers two practical methods:</p> <ol> <li>\ud83e\udd47 Recommended: user-level SSH inhibitor (via <code>systemd-run</code>)</li> <li>\ud83e\udde9 Optional: background service that blocks sleep when any network connection is active</li> </ol>"},{"location":"nosleep-remote/#recommended-user-level-ssh-sleep-inhibitor","title":"\ud83e\udd47 Recommended: User-Level SSH Sleep Inhibitor","text":"<p>This approach blocks system suspend whenever an SSH session is open \u2014 without requiring root, sudo, or system-wide configuration.</p> <p>It works by using <code>systemd-run --user</code> to create a temporary inhibit scope tied to your SSH login session. When you log out, the inhibitor automatically disappears.</p>"},{"location":"nosleep-remote/#step-1-add-inhibitor-to-ssh-session","title":"Step 1 \u2014 Add inhibitor to SSH session","text":"<p>Edit <code>/etc/ssh/sshrc</code> and add this block near the end:</p> <pre><code># Prevent sleep while SSH session is active\nsystemd-run --scope --user systemd-inhibit \\\n  --what=sleep \\\n  --who=\"SSH session\" \\\n  --why=\"Active SSH connection\" \\\n  sleep infinity &gt;/dev/null 2&gt;&amp;1 &amp;\n</code></pre> <p>\ud83e\udde0 This command starts a background process that tells <code>systemd-logind</code> \"do not allow sleep\" while the SSH session is active.</p>"},{"location":"nosleep-remote/#step-2-recommended-clean-up-on-logout","title":"Step 2 \u2014 (Recommended) Clean up on logout","text":"<p>To ensure no orphaned inhibitors remain if a session is interrupted, add this line to <code>/etc/bash.bash_logout</code>:</p> <pre><code># Clean up SSH-based inhibitors on logout\npkill -f \"systemd-inhibit.*SSH session\" || true\n</code></pre>"},{"location":"nosleep-remote/#step-3-verify-active-inhibitors","title":"Step 3 \u2014 Verify active inhibitors","text":"<ol> <li> <p>SSH into your Debian host.</p> </li> <li> <p>Run:</p> </li> </ol> <p><code>bash    systemd-inhibit --list</code></p> <p>Check for <code>SSH session ... systemd-inhibit</code>. Example output:</p> <pre><code>WHO            UID  USER   PID  COMM            WHAT                                                     WHY           &gt;\nModemManager   0    root   1365 ModemManager    sleep                                                    ModemManager n&gt;\nNetworkManager 0    root   1251 NetworkManager  sleep                                                    NetworkManager&gt;\nUPower         0    root   1642 upowerd         sleep                                                    Pause device p&gt;\nGNOME Shell    1000 &lt;USER&gt; 2173 gnome-shell     sleep                                                    GNOME needs to&gt;\nSSH session    1000 &lt;USER&gt; 5214 systemd-inhibit sleep                                                    Active SSH con&gt;\n...\n</code></pre> <p>That confirms your SSH inhibitor is active.</p>"},{"location":"nosleep-remote/#step-4-test-it","title":"Step 4 \u2014 Test it","text":"<p>Try to suspend manually:</p> <pre><code>systemctl suspend\n</code></pre> <p>You should see something like:</p> <pre><code>Operation inhibited by \"systemd-inhibit (SSH session)\"\n</code></pre>"},{"location":"nosleep-remote/#why-this-method-is-ideal","title":"Why this method is ideal","text":"\u2705 Benefit Description No sudo required Works as a normal user \u2014 no prompts or configuration changes Automatic cleanup Inhibitor ends when SSH session ends Low overhead No polling or background daemons Works per user Independent for multiple concurrent SSH sessions"},{"location":"nosleep-remote/#optional-global-network-activity-monitor-systemd-service","title":"\ud83e\udde9 Optional: Global Network Activity Monitor (systemd Service)","text":"<p>If you want to prevent sleep whenever any TCP connection is active \u2014 not just SSH \u2014 you can run a background systemd service.</p> <p>Create <code>/usr/local/bin/net-activity-inhibit</code>:</p> <pre><code>#!/usr/bin/env bash\nset -euo pipefail\n\nwhile true; do\n  conns=$(ss -t -H state established | grep -v '127\\.0\\.0\\.1' | wc -l)\n\n  if (( conns &gt; 0 )); then\n    systemd-inhibit --what=sleep \\\n      --who=\"net-activity-inhibit\" \\\n      --why=\"Active TCP connections\" \\\n      sleep 300 &amp;\n    pid=$!\n    wait $pid\n  else\n    sleep 60\n  fi\ndone\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x /usr/local/bin/net-activity-inhibit\n</code></pre> <p>Then define <code>/etc/systemd/system/net-activity-inhibit.service</code>:</p> <pre><code>[Unit]\nDescription=Prevent sleep when active network connections exist\nAfter=network-online.target\n\n[Service]\nType=simple\nExecStart=/usr/local/bin/net-activity-inhibit\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Enable and start:</p> <pre><code>systemctl daemon-reload\nsystemctl enable --now net-activity-inhibit.service\n</code></pre>"},{"location":"nosleep-remote/#summary","title":"\u2705 Summary","text":"Method Scope Privileges Complexity Recommended for SSH-based inhibitor (<code>systemd-run --user</code>) Only SSH sessions No root required \u2b50 Simple Remote admin / homelab Network-activity monitor All TCP connections Root required \u2699\ufe0f Moderate NAS / always-on servers <p>For most Debian homelab servers and remote systems, the SSH-based approach is the cleanest and safest solution.</p>"},{"location":"task/","title":"Task","text":"<p>Task is a task runner / build tool that aims to be simple and easy to use.</p>"},{"location":"task/#use","title":"Use","text":"<p>Once the binary is installed, tasks can be listed with:</p> <pre><code>task --list\n</code></pre> <p>To get a summary of the task args and use:</p> <pre><code>task &lt;namespace&gt;:&lt;taskname&gt; --summary\n</code></pre>"},{"location":"task/#variables","title":"Variables","text":"<p>Variables can be provided in tasks with <code>&lt;name&gt;=&lt;value&gt;</code> notation:</p> <pre><code>task &lt;namespace&gt;:&lt;taskname&gt; var='value'\n</code></pre> <p>If allowed, additional arbitrary strings (i.e., cli flags, etc) can be passed following a <code>--</code>:</p> <pre><code>task &lt;namespace&gt;:&lt;taskname&gt; var='value' -- '--quiet'\n</code></pre>"}]}