---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io/
      chart: authentik
      version: 5.2.1
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
  values:
    image:
      repository: ghcr.io/goauthentik/server
      tag: 2022.1.1

    ingress:
      enabled: false
      hosts:
        - host: auth.${SECRET_DOMAIN}
          paths:
            - path: "/"
              pathType: Prefix

    authentik:
      log_level: debug
      secret_key: ${SECRET_AUTHENTIK_KEY}
      error_reporting:
        enabled: false

      email:
        host: "in-v3.mailjet.com"
        port: 587
        username: ${SECRET_SMTP_USER}
        password: ${SECRET_SMTP_PWD}
        use_ssl: true
        from: "noreply@mail.${SECRET_DOMAIN}"

      outposts:
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s

      postgresql:
        # host: "postgresql://authentik:${SECRET_DB_USER_PWD}@postgresql.postgresql:5432/authentik"
        # host: "{{ .Release.Name }}-postgresql"
        name: authentik
        user: authentik
        password: ${SECRET_DB_USER_PWD}

      redis:
        # host: "{{ .Release.Name }}-redis-master"
        password: ${SECRET_DB_USER_PWD}

    # geoip: /geoip/GeoLite2-City.mmdb
    geoip:
      enabled: true
      accountId: ${SECRET_MAXMIND_ACCOUNT_ID}
      licenseKey: ${SECRET_MAXMIND_LICENSE_KEY}

    # use bundled dbs?
    postgresql:
      enabled: true
      postgresqlDatabase: authentik
      postgresqlUsername: authentik
      postgresqlPassword: ${SECRET_DB_USER_PWD}

      persistence:
        enabled: true
        existingClaim: authentik-db

      primary:
        podAnnotations:
          backup.velero.io/backup-volumes: data
          pre.hook.backup.velero.io/container: fsfreeze
          pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/data"]'
          post.hook.backup.velero.io/container: fsfreeze
          post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/data"]'
        sidecars:
          - name: fsfreeze
            image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
            volumeMounts:
              - name: data
                mountPath: /data
            securityContext:
              privileged: true

    redis:
      enabled: true
      auth:
        enabled: true
        password: ${SECRET_DB_USER_PWD}
