---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: cockroachdb
  namespace: cockroachdb
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.cockroachdb.com/
      chart: cockroachdb
      version: 6.1.0
      sourceRef:
        kind: HelmRepository
        name: cockroachdb-charts
        namespace: flux-system
  values:
    statefulset:
      replicas: 3
      updateStrategy:
        type: RollingUpdate
      podManagementPolicy: Parallel
      budget:
        maxUnavailable: 1
      resources:
        limits:
          memory: "4Gi"
        requests:
          memory: "4Gi"
    conf:
      cache: "1Gi"
      max-sql-memory: "1Gi"

    service:
      ports:
        # You can set a different external and internal gRPC ports and their name.
        grpc:
          external:
            port: 26257
            name: grpc
          # If the port number is different than `external.port`, then it will be named as `internal.name` in Service.
          internal:
            port: 26257
            # If using Istio set it to `cockroach`.
            name: grpc-internal
        http:
          port: 8080
          name: http

      # This Service is meant to be used by clients of the database.
      # It exposes a ClusterIP that will automatically load balance connections to the different database Pods.
      public:
        type: ClusterIP

    # CockroachDB's data persistence.
    storage:
      persistentVolume:
        enabled: true
        storageClass: "csi-truenas-iscsi"
        size: 8Gi

    # CockroachDB's Prometheus operator ServiceMonitor support
    serviceMonitor:
      enabled: false
      labels: {}
      annotations: {}
      interval: 10s
      # scrapeTimeout: 10s

    # Whether to run securely using TLS certificates.
    tls:
      enabled: true
      serviceAccount:
        create: true
      # certs:
      #   # Bring your own certs scenario. If provided, tls.init section will be ignored.
      #   provided: false
      #   # Enable if the secret is a dedicated TLS. TLS secrets are created by cert-mananger, for example.
      #   tlsSecret: true
      #   # Enable if the you want cockroach db to create its own certificates
      #   selfSigner:
      #     # If set, the cockroach db will generate its own certificates
      #     enabled: false

      #   # Use cert-manager to issue certificates for mTLS.
      #   certManager: true
      #   # Specify an Issuer or a ClusterIssuer to use, when issuing node and client certificates.
      #   # The values correspond to the issuerRef specified in the certificate.
      #   certManagerIssuer:
      #     group: cert-manager.io
      #     kind: ClusterIssuer
      #     name: cockroachdb
