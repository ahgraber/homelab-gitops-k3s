apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: postgres-operator
  namespace: postgres
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://raw.githubusercontent.com/zalando/postgres-operator/master/charts/postgres-operator/
      chart: postgres-operator
      version: 1.8.0
      sourceRef:
        kind: HelmRepository
        name: zalando-postgres-charts
        namespace: flux-system
      interval: 5m
  # https://github.com/zalando/postgres-operator/blob/master/charts/postgres-operator/values.yaml
  # https://github.com/zalando/postgres-operator/blob/master/docs/reference/operator_parameters.md
  values:
    # use CRD to define operator configuration instead of (deprecated) configmap
    configTarget: "OperatorConfigurationCRD"

    # general configuration parameters
    configGeneral:
      # the deployment should create/update the CRDs
      enable_crd_registration: true
      # specify categories under which crds should be listed
      crd_categories:
        - "all"
      # update only the statefulsets without immediately doing the rolling update
      enable_lazy_spilo_upgrade: false
      # set the PGVERSION env var instead of providing the version via postgresql.bin_dir in SPILO_CONFIGURATION
      enable_pgversion_env_var: true
      # start any new database pod without limitations on shm memory
      enable_shm_volume: true
      # min number of instances in Postgres cluster. -1 = no limit
      min_instances: -1
      # max number of instances in Postgres cluster. -1 = no limit
      max_instances: 3
      # period between consecutive repair requests
      repair_period: 5m
      # period between consecutive sync requests
      resync_period: 30m

    # parameters describing Postgres users
    configUsers:
      # postgres superuser name to be created by initdb
      super_username: postgres
      # postgres username used for replication between instances
      replication_username: postgres
      # roles to be granted to database owners
      additional_owner_roles:
        - cron_admin

    configMajorVersionUpgrade:
      # "off": no upgrade, "manual": manifest triggers action, "full": minimal version violation triggers too
      major_version_upgrade_mode: "full"
      # if current_version is >= minimal_major_version, no auto-upgrade
      minimal_major_version: "9.6"
      # if auto-upgrade is triggered, upgrade to target_major_version
      target_major_version: "14"

    configKubernetes:
      # allow user secrets in other namespaces than the Postgres cluster
      # if enabled, specify the namespace in the form {namespace}.{username}
      enable_cross_namespace_secret: false
      # enables initContainers to run actions before Spilo is started
      enable_init_containers: true
      # toggles pod anti affinity on the Postgres pods
      enable_pod_antiaffinity: false
      # toggles PDB to set to MinAvailabe 0 or 1
      enable_pod_disruption_budget: false ## https://github.com/zalando/postgres-operator/issues/547
      # enables sidecar containers to run alongside Spilo in the same pod
      enable_sidecars: true

      # # namespaced name of the secret containing infrastructure roles names and passwords
      # infrastructure_roles_secret_name: postgresql-infrastructure-roles

      # name of the Secret (in cluster namespace) with environment variables to populate on every pod
      # https://github.com/zalando/postgres-operator/blob/master/docs/administrator.md#custom-pod-environment-variables
      # Any env var used by spilo can be added: https://github.com/zalando/spilo/blob/master/ENVIRONMENT.rst
      pod_environment_secret: "postgres-podenv-secret"

      # operator watches for postgres objects in the given namespace
      watched_namespace: "*" # listen to all namespaces

      # list of labels that can be inherited from the cluster manifest
      inherited_labels:
        - application
        - environment

      toleration:
        master-node: "key:node-role.kubernetes.io/master,effect:NoSchedule"

    # configure resource requests for the Postgres pods
    configPostgresPodResources:
      # limits/requests for the postgres containers
      default_cpu_limit: "1"
      default_cpu_request: 100m
      default_memory_limit: 500Mi
      default_memory_request: 100Mi
      # hard CPU/memory minimum required to properly run a Postgres cluster
      min_cpu_limit: 250m
      min_memory_limit: 250Mi

    ### configured using pod_environment_secret to pass directly to postgres_cluster pods
    # # configure interaction with non-Kubernetes objects from AWS or GCP
    # configAwsOrGcp:
    #   # S3 bucket to use for shipping WAL segments with WAL-E
    #   wal_s3_bucket: ""
    #   # S3 bucket to use for shipping postgres daily logs
    #   log_s3_bucket: ""

    #   # Additional Secret (aws or gcp credentials) to mount in the pod
    #   additional_secret_mount: "some-secret-name"
    #   # Path to mount the above Secret in the filesystem of the container(s)
    #   additional_secret_mount_path: "/some/dir"

    #   # # AWS region used to store ESB volumes (not for backup/restore)
    #   # aws_region: eu-central-1

    # # configure K8s cron job managed by the operator
    # configLogicalBackup:
    #   # prefix for the backup job name
    #   logical_backup_job_prefix: "logical-backup-"
    #   # storage provider - either "s3" or "gcs"
    #   logical_backup_provider: "s3"
    #   # S3 Access Key ID
    #   logical_backup_s3_access_key_id: ""
    #   # S3 bucket to store backup results
    #   logical_backup_s3_bucket: "my-bucket-url"
    #   # S3 region of bucket
    #   logical_backup_s3_region: ""
    #   # S3 endpoint url when not using AWS
    #   logical_backup_s3_endpoint: ""
    #   # S3 Secret Access Key
    #   logical_backup_s3_secret_access_key: ""
    #   # S3 server side encryption
    #   logical_backup_s3_sse: "AES256"
    #   # S3 retention time for stored backups for example "2 week" or "7 days"
    #   logical_backup_s3_retention_time: ""
    #   # backup schedule in the cron format
    #   logical_backup_schedule: "30 00 * * *"
