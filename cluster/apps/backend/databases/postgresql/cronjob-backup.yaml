---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: role-postgresql-backup
  namespace: postgresql
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
    verbs:
      - "*"

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rbac-postgresql-backup
  namespace: postgresql
subjects:
  - kind: ServiceAccount
    name: sa-postgresql-backup
    namespace: postgresql
roleRef:
  kind: Role
  name: role-postgresql-backup
  apiGroup: ""

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-postgresql-backup
  namespace: postgresql
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cronjob-postgresql-backup-monthly
  namespace: postgresql
spec:
  # Kubernetes uses UTC exclusively - adjust from local time!
  # Local is (UTC - 4) // UTC is (local + 4)
  schedule: "44 4 1 * *"
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          serviceAccountName: sa-postgresql-backup
          containers:
            - name: backup
              image: bitnami/kubectl:latest
              env:
                - name: TZ
                  value: "America/New_York"
                - name: SECRET_DB_ROOT_PWD
                  value: ${SECRET_DB_ROOT_PWD}
                  # valueFrom:
                  #   secretKeyRef:
                  #     name: secret-postgresql
                  #     key: postgresql-root-password
              command:
                - "/bin/bash"
                - "-c"
                - |
                  echo 'Making monthly backup directory...'
                  kubectl exec postgresql-postgresql-0 -n postgresql -- /bin/bash -c '\
                  BACKUPDIR="/mnt/backup/backup.d/backup-$(date +'%Y-%m-%d')"
                  mkdir -p $BACKUPDIR
                  '

                  echo "Running monthly backup..."
                  kubectl exec postgresql-postgresql-0 -n postgresql -- /bin/bash -c '\
                  cat > /bitnami/postgresql/.pgpass << EOF
                  *:*:replication:postgres:${SECRET_DB_ROOT_PWD}
                  EOF
                  chmod 0600 /bitnami/postgresql/.pgpass

                  BACKUPDIR="/mnt/backup/backup.d/backup-$(date +'%Y-%m-%d')"
                  PGPASSFILE=/bitnami/postgresql/.pgpass pg_basebackup -U postgres --no-password -D $BACKUPDIR
                  '

                  echo "Trimming old basebackup directories..."
                  # ref: https://www.zimmi.cz/posts/2018/postgresql-backup-and-recovery-orchestration-wal-archiving/

                  kubectl exec postgresql-postgresql-0 -n postgresql -- /bin/bash -c '\
                  # clean up backup.d
                  # Find directories more than 100 days old, remove
                  BACKUPDIR="/mnt/backup/backup.d/"
                  find $BACKUPDIR/* -maxdepth 0 -type d -mtime +100 -print0 | xargs -0 rm -rfv
                  '

                  echo "Trimming old WAL files..."
                  # ref: https://www.zimmi.cz/posts/2018/postgresql-backup-and-recovery-orchestration-wal-archiving/

                  kubectl exec postgresql-postgresql-0 -n postgresql -- /bin/bash -c '\
                  # clean up incremental.d
                  # Of WAL files less than 100 days old, find successful backup,
                  # sort by date, use the oldest (100-day) one as a reference to clean up older
                  INCREMENTALDIR="/mnt/backup/incremental.d/"
                  OLDEST_BASE_BACKUP=$(basename $(find $INCREMENTALDIR -type f -iname "*.backup" -mtime -100 -print0 | xargs -0 ls -t | tail -n 1))
                  pg_archivecleanup -d $INCREMENTALDIR $OLDEST_BASE_BACKUP;
                  '

                  echo "Backup process completed."
                  exit

              volumeMounts:
                - name: backup
                  mountPath: /mnt/backup
          restartPolicy: Never
          volumes:
            - name: backup
              persistentVolumeClaim:
                claimName: backup-postgresql
