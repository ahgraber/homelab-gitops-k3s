---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: postgresql
  namespace: postgresql
spec:
  interval: 10m
  timeout: 10m  # extended period because of lengthy startup
  chart:
    spec:
      # renovate: registryUrl=https://charts.bitnami.com/bitnami
      chart: postgresql
      version: 10.12.9
      sourceRef:
        kind: HelmRepository
        name: bitnami-charts
        namespace: flux-system
  values:
    image:
      debug: true

    global:
      postgresql:
        ## specifying globally should override non-globally declared values
        # postgresqlUsername: postgres
        # postgresqlPassword: ${SECRET_DB_ROOT_PWD}
        # replicationPassword: ${SECRET_DB_ROOT_PWD}
        ## Using existingSecret ignores global postgresqlUsername, postgresqlPassword, and replicationPassword
        existingSecret: "secret-postgresql"

    replication:
      enabled: false
      # user: repl_user
      # password: ${SECRET_DB_ROOT_PWD}

    # postgresqlUsername: postgres
    # postgresqlPassword: ${SECRET_DB_ROOT_PWD}
    # postgresqlPostgresPassword: ${SECRET_DB_ROOT_PWD}
    ## NOTE: When it's set the other auth/password parameters are ignored.
    ## Use existing secret (ignores postgresqlUsername, postgresqlPassword, and replication.password)
    # existingSecret: "secret-postgresql"

    ## An array to add extra environment variables
    extraEnv:
      - name: TZ
        value: "America/New_York"

    configurationConfigMap: "configmap-postgresql-conf"
    initdbScriptsConfigMap: "configmap-postgresql-init"
    # initdbUser: postgres
    # initdbPassword: ${SECRET_DB_ROOT_PWD}

    service:
      ## Kubernetes service type and port number
      # type: ClusterIP
      type: LoadBalancer
      loadBalancerIP: ${METALLB_POSTGRES}
      port: 5432

    persistence:
      enabled: true
      existingClaim: data-postgresql-postgresql-0
      # storageClass: "csi-truenas-iscsi"
      # size: 8Gi

    primary:
      podAnnotations:
        secret.reloader.stakater.com/reload: "configmap-postgresql-conf, configmap-postgresql-init, secret-postgresql"
        backup.velero.io/backup-volumes: "data"
        backup.velero.io/backup-volumes-excludes: "backup"
        pre.hook.backup.velero.io/container: fsfreeze
        pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/bitnami/postgresql"]'
        post.hook.backup.velero.io/container: fsfreeze
        post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/bitnami/postgresql"]'

      extraVolumes:
        - name: backup
          persistentVolumeClaim:
            claimName: "backup-postgresql"
      extraVolumeMounts:
        - name: backup
          mountPath: "/mnt/backup"

      # sidecars:
      #   fsfreeze:
      #     name: fsfreeze
      #     image: "ghcr.io/k8s-at-home/fsfreeze:v2.37-r0"
      #     volumeMounts:
      #       - name: data
      #         mountPath: "/bitnami/postgresql"
      #     securityContext:
      #       privileged: true

    serviceAccount:
      create: true

    # rbac:
    #   create: true

    volumePermissions:
      enabled: false

    metrics:
      enabled: false
