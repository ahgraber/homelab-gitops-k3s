apiVersion: v1
metadata:
  annotations:
    meta.helm.sh/release-name: postgresql
    meta.helm.sh/release-namespace: postgresql
  name: configmap-postgresql-init
  namespace: postgresql
kind: ConfigMap
data:
  01-init-server.sh: |
    #!/bin/bash

    # import functions
    # ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/12/debian-10/rootfs/opt/bitnami/scripts/libpostgresql.sh#L468
    . /opt/bitnami/scripts/libpostgresql.sh
    # . /opt/bitnami/scripts/postgresql-env.sh

    # update pg_hba.conf
    cat <<EOF >>"$POSTGRESQL_PGHBA_FILE"
    host      replication     postgres        0.0.0.0/0               md5
    host      replication     postgres        ::/0                    md5
    local     replication     postgres                                md5
    host      replication     postgres        127.0.0.1/32            md5
    host      replication     postgres        ::1/128                 md5
    EOF

    # if [[ -n "$POSTGRES_REPLICATION_USER" ]]; then
    #   postgresql_create_replication_user
    #   cat <<EOF >>"$POSTGRESQL_PGHBA_FILE"
    # host      replication     ${POSTGRES_REPLICATION_USER}       0.0.0.0/0               md5
    # host      replication     ${POSTGRES_REPLICATION_USER}       ::/0                    md5
    # local     replication     ${POSTGRES_REPLICATION_USER}                               md5
    # host      replication     ${POSTGRES_REPLICATION_USER}       127.0.0.1/32            md5
    # host      replication     ${POSTGRES_REPLICATION_USER}       ::1/128                 md5
    # EOF
    # fi

    postgresql_restrict_pghba

    # update postgresql.conf
    sed -i 's/#archive_mode/archive_mode/' "$POSTGRESQL_CONF_FILE"
    postgresql_set_property "archive_mode" "on"

    sed -i 's/#archive_command/archive_command/' "$POSTGRESQL_CONF_FILE"
    postgresql_set_property "archive_command" "\'test ! -f /mnt/backup/incremental.d/%f && mkdir -p /mnt/backup/incremental.d/ && cp %p /mnt/backup/incremental.d/%f\'"

    sed -i 's/#archive_timeout/archive_timeout/' "$POSTGRESQL_CONF_FILE"
    postgresql_set_property "archive_timeout" "900s"

    info "Reloading configurations"
    echo "SELECT pg_reload_conf();" | postgresql_execute "" "postgres" "$POSTGRESQL_PASSWORD"

  10-init_db.sh: |
    #!/bin/bash

    # import functions
    # ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/12/debian-10/rootfs/opt/bitnami/scripts/libpostgresql.sh#L468
    . /opt/bitnami/scripts/libpostgresql.sh
    # . /opt/bitnami/scripts/postgresql-env.sh

    # export ROOT_PWD="${SECRET_DB_ROOT_PWD}"
    export USER_PASSWORD="${SECRET_DB_USER_PWD}"

    function initdb {
      local -r escaped_password="${USER_PASSWORD//\'/\'\'}"
      local -r create_new="$1"

      info "Creating \"$create_new\" user and database"
      echo "CREATE ROLE \"${create_new}\" WITH LOGIN PASSWORD '${escaped_password}';" | postgresql_execute "" "postgres" "$POSTGRESQL_PASSWORD"
      echo "CREATE DATABASE \"${create_new}\"" | postgresql_execute "" "postgres" "$POSTGRESQL_PASSWORD"
      info "Granting access to \"${create_new}\" to the database \"${create_new}\""
      echo "GRANT ALL PRIVILEGES ON DATABASE \"${1}\" TO \"${create_new}\"\;" | postgresql_execute "" "postgres" "$POSTGRESQL_PASSWORD"
    }

    # initialize users + databases
    initdb "vaultwarden"
    initdb "authentik"
    initdb "mealie"
    initdb "nextcloud"

    # unset ROOT_PWD
    unset USER_PASSWORD

  99-backup.sh: |
    #!/bin/bash

    # import functions
    # ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/12/debian-10/rootfs/opt/bitnami/scripts/libpostgresql.sh#L468
    . /opt/bitnami/scripts/libpostgresql.sh
    # . /opt/bitnami/scripts/postgresql-env.sh

    echo 'Making .pgpass file...'
    cat > /bitnami/postgresql/.pgpass << EOF
    # hostname:port:database:username:password
    *:*:replication:postgres:$POSTGRESQL_PASSWORD
    EOF
    chmod 0600 /bitnami/postgresql/.pgpass

    info 'Making backup directories if they do not exist...'
    BACKUPDIR="/mnt/backup/backup.d/backup-$(date +'%Y-%m-%d')"
    mkdir -p $BACKUPDIR

    info 'Checking backup directory...'
    if [ -z "$(ls -A $BACKUPDIR)" ]; then
      echo "Base backup location $BACKUPDIR is empty, running full backup..."

      PGPASSFILE=/bitnami/postgresql/.pgpass pg_basebackup -U postgres --no-password -D $BACKUPDIR
      echo "Base backup successful"
    fi

    echo 'Removing .pgpass file...'
    rm -f /bitnami/postgresql/.pgpass
