apiVersion: v1
metadata:
  annotations:
    meta.helm.sh/release-name: postgresql
    meta.helm.sh/release-namespace: postgresql
  name: configmap-postgresql-init
  namespace: postgresql
kind: ConfigMap
data:
  01-init_db.sh: |
    #!/bin/bash
    export ROOT_PWD="${SECRET_DB_ROOT_PWD}"
    export USER_PWD="${SECRET_DB_USER_PWD}"
    # echo "ROOT_PWD=$ROOT_PWD"
    # echo "USER_PWD=$USER_PWD"

    echo 'Making .pgpass file...'
    cat > /bitnami/postgresql/.pgpass << EOF
    # hostname:port:database:username:password
    *:*:replication:postgres:$ROOT_PWD
    EOF
    chmod 0600 /bitnami/postgresql/.pgpass

    function initdb {
      echo "Creating \"$1\" user and database"

      # note: if this presents problems in the future, look into heredoc indentations
      psql "postgresql://postgres:$ROOT_PWD@localhost:5432" -e <<EOSQL
    CREATE USER $1 WITH LOGIN PASSWORD '$USER_PWD';
    CREATE DATABASE "$1";
    GRANT ALL PRIVILEGES ON DATABASE "$1" TO "$1";
    EOSQL
    }

    # initialize users + databases
    initdb "vaultwarden"
    initdb "authentik"
    initdb "mealie"
    initdb "nextcloud"

    unset ROOT_PWD
    unset USER_PWD

  99-backup.sh: |
    #!/bin/bash
    export ROOT_PWD="${SECRET_DB_ROOT_PWD}"

    echo 'Making .pgpass file...'
    cat > /bitnami/postgresql/.pgpass << EOF
    # hostname:port:database:username:password
    *:*:replication:postgres:$ROOT_PWD
    EOF
    chmod 0600 /bitnami/postgresql/.pgpass

    echo 'Making backup directories if they do not exist...'
    BACKUPDIR='/mnt/backup/backup.d/backup-$(date +'%Y-%m-%d)'
    mkdir -p $BACKUPDIR

    echo 'Checking backup directory...'
    if [ -z "$(ls -A $BACKUPDIR)" ]; then
      echo "Base backup location $BACKUPDIR is empty, running full backup..."

      PGPASSFILE=/bitnami/postgresql/.pgpass pg_basebackup -U postgres --no-password -D $BACKUPDIR
      echo "Base backup successful"
    fi

    echo 'Removing .pgpass file...'
    rm -rf /bitnami/postgresql/.pgpass
    unset ROOT_PWD
