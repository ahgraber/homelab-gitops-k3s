---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: phpmyadmin
  namespace: mariadb
spec:
  interval: 10m
  timeout: 10m  # extended period because of lengthy startup
  chart:
    spec:
      # renovate: registryUrl=https://charts.bitnami.com/bitnami
      chart: phpmyadmin
      version: 8.2.12
      sourceRef:
        kind: HelmRepository
        name: bitnami-charts
        namespace: flux-system
  values:
    ## Kubernetes Cluster Domain
    clusterDomain: "${SECRET_DOMAIN}"

    ## Deployment pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    hostAliases:
      # Necessary for apache-exporter to work
      - ip: "127.0.0.1"
        hostnames:
          - "status.localhost"

    ## phpMyAdmin container ports to open
    containerPorts:
      http: 8080
      https: 8443

    ## Strategy to use to update Pods
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate or OnDelete
      type: RollingUpdate

    ## phpMyAdmin containers' liveness and readiness probes. Evaluated as a template.
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      timeoutSeconds: 30
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 6
      httpGet:
        path: /
        port: http
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      timeoutSeconds: 30
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 6
      httpGet:
        path: /
        port: http

    ## Service configuration
    service:
      ## Service type.
      type: ClusterIP
      ## HTTP Port
      port: 80
      ## HTTPS Port
      httpsPort: 443
      ## Specify the nodePort values for the LoadBalancer and NodePort service types.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport

    ## Ingress configuration
    ingress:
      ## Set to true to enable ingress record generation
      enabled: false # we'll define a custom ingressRoute

    ## Prometheus Exporter / Metrics
    metrics:
      enabled: false
      image:
        registry: docker.io
        repository: bitnami/apache-exporter
        tag: 0.8.0-debian-10-r388
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        # pullSecrets:
        #   - myRegistryKeySecretName

      ## Metrics exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      resources: {}

      ## Prometheus Exporter service configuration
      service:
        type: ClusterIP
        port: 9117
        ## Annotations for Prometheus Exporter pods. Evaluated as a template.
        ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        ## Use serviceLoadBalancerIP to request a specific static IP,
        ## otherwise leave blank
        # loadBalancerIP:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "{{ .Values.metrics.service.port }}"

      ## Prometheus Service Monitor
      ## ref: https://github.com/coreos/prometheus-operator
      ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      serviceMonitor:
        ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
        enabled: false
        ## Specify the namespace in which the serviceMonitor resource will be created
        # namespace: ""
        ## The name of the label on the target service to use as the job name in prometheus
        # jobLabel:
        ## Specify the interval at which metrics should be scraped
        interval: 30s
        ## Specify the timeout after which the scrape is ended
        # scrapeTimeout: 30s
        ## Relabeling (before scrape)
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
        # relabellings:
        ## Specify honorLabels parameter to add the scrape endpoint
        ## Metric relabeling
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
        # metricRelabelings:
        ## Specify honorLabels parameter to add the scrape endpoint
        honorLabels: false
        ## Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
        additionalLabels: {}

    ## Database configuration
    db:
      ## If you do not want the user to be able to specify an arbitrary MySQL server at login time, set this to false
      allowArbitraryServer: true
      ## Database port
      port: 3306
