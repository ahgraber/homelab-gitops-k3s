---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: traefik
  namespace: networking
  annotations:
    metallb.universe.tf/address-pool: frontend
spec:
  interval: 5m

  # see: https://github.com/fluxcd/helm-controller/issues/142
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  timeout: 10m

  chart:
    spec:
      # renovate: registryUrl=https://helm.traefik.io/traefik
      chart: traefik
      version: 10.1.1
      sourceRef:
        kind: HelmRepository
        name: traefik-charts
        namespace: flux-system
  values:
    deployment:
      kind: Deployment
      replicas: 3
    service:
      enabled: true
      type: LoadBalancer
      spec:
        # expects IP only, no netmask
        # externalIPs:
        #   - "${METALLB_FRONTEND}"  # this should be the metallb IP reserved for Ingress
        loadBalancerIP: "${METALLB_FRONTEND}"  # this should be the metallb IP reserved for Ingress
        # externalTrafficPolicy: Local  # Cluster
      # annotations:
    logs:
      general:
        format: json
        level: DEBUG
      access:
        enabled: true
        format: json
    # installCRDs: true
    ingressClass:
      enabled: false
      isDefaultClass: false
      fallbackApiVersion: v1
    ingressRoute:
      dashboard:
        enabled: false  # we'll use a custom ingressRoute with basic auth instead of the default one

    globalArguments:
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    additionalArguments:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--serverstransport.insecureskipverify=true"
      # - "--entryPoints.mysql.http.middlewares=rfc1918"
      # - "--entryPoints.metrics.http.middlewares=rfc1918"
      # - "--entryPoints.traefik.http.middlewares=rfc1918"
      ## providers
      ## if next line is enabled, will need to add an annotation to ingresses you create to servce those requests:
      # - "--providers.kubernetesingress.ingressclass=traefik"
      # - "--providers.kubernetesingress.ingressendpoint.ip=${METALLB_FRONTEND}"
      ## if next line is enabled, will need to add an annotation to ingresses you create to servce those requests:
      # - "--providers.kubernetescrd.ingressclass=traefik-crd"
      # - "--providers.kubernetescrd.ingressendpoint.ip=${METALLB_FRONTEND}"
      ## other niceties
      - "--log.level=INFO"
      - "--ping"

    env:
    - name: TZ
      value: "America/New_York"

    metrics:
      prometheus:
        entryPoint: metrics
    pilot:
      enabled: false
    # equivalent to entryPoints static config
    ports:
      traefik:
        port: 9000
        # Use hostPort if set.
        # hostPort: 9000
        #
        # Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which
        # means it's listening on all your interfaces and all your IPs. You may want
        # to set this value if you need traefik to listen on specific interface
        # only.
        # hostIP: 192.168.100.10

        # Override the liveness/readiness port. This is useful to integrate traefik
        # with an external Load Balancer that performs healthchecks.
        # healthchecksPort: 9000

        # Defines whether the port is exposed if service.type is LoadBalancer or
        # NodePort.
        #
        # You SHOULD NOT expose the traefik port on production deployments.
        # If you want to access it from outside of your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose: false
        # The exposed port for this service
        exposedPort: 9000
        # The port protocol (TCP/UDP)
        protocol: TCP
      web:
        expose: true
        exposedPort: 80
        port: 8000
        # hostPort: 8000
        # The port protocol (TCP/UDP)
        protocol: TCP
        # Use nodeport if set. This is useful if you have configured Traefik in a LoadBalancer
        # nodePort: 32080
        # Port Redirections-- Added in 2.2, make permanent redirects via entrypoints.
        # redirectTo: websecure
      websecure:
        expose: true
        exposedPort: 443
        port: 8443
        # hostPort: 8443
        # nodePort: 32443
        # Set TLS at the entrypoint
        # https://doc.traefik.io/traefik/routing/entrypoints/#tls
        tls:
          enabled: true
          options: "default"
      mysql:
        port: 3306
        # hostPort: 3306
        # You may not want to expose the metrics port on production deployments.
        # If you want to access it from outside of your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose: true
        # The exposed port for this service
        exposedPort: 3306
        # The port protocol (TCP/UDP)
        protocol: TCP
      metrics:
        port: 8082
        # hostPort: 8082
        # Defines whether the port is exposed if service.type is LoadBalancer or
        # NodePort.
        #
        # You may not want to expose the metrics port on production deployments.
        # If you want to access it from outside of your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose: false
        # The exposed port for this service
        exposedPort: 8082
        # The port protocol (TCP/UDP)
        protocol: TCP
    providers:
      kubernetesCRD:
        enabled: true
      kubernetesIngress:
        enabled: true
    rbac:
      enabled: true
    ## Resolves: error while building entryPoint web: error preparing server: error opening listener: listen tcp :80: bind: permission denied
    ## https://stackoverflow.com/questions/66138370/permission-problem-w-helm3-installation-of-traefik-on-port-80-hostnetwork
    securityContext:
      capabilities:
        drop: [ALL]
        add: [NET_BIND_SERVICE]
      readOnlyRootFilesystem: true
      runAsGroup: 65532  # 0
      runAsNonRoot: true  # false
      runAsUser: 65532  # 0

    tlsOptions:
      default:
        minVersion: VersionTLS12
        maxVersion: VersionTLS13
        sniStrict: true

    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
