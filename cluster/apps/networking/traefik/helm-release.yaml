---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: traefik
  namespace: networking
  annotations:
    metallb.universe.tf/address-pool: ingress
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://helm.traefik.io/traefik
      chart: traefik
      version: 20.8.0
      sourceRef:
        kind: HelmRepository
        name: traefik-charts
        namespace: flux-system
  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  dependsOn:
    - name: cert-manager
      namespace: cert-manager
  values:
    deployment:
      kind: DaemonSet

    # installCRDs: true
    ingressClass:
      enabled: true
      isDefaultClass: true
      fallbackApiVersion: v1

    experimental:
      v3:
        enabled: false
      plugins:
        enabled: false
      kubernetesGateway:
        enabled: false

    ingressRoute:
      dashboard:
        enabled: false # we'll use a custom ingressRoute with basic auth instead of the default one

    providers:
      kubernetesCRD:
        enabled: true
        allowCrossNamespace: true
        allowExternalNameServices: true
        # ingressClass: "traefikcrd"
      kubernetesIngress:
        enabled: true
        # ingressClass: "traefik"

    globalArguments:
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    additionalArguments:
      - "--api=true"
      # - "--api.dashboard=true"
      - "--api.debug=true"
      - "--api.insecure=true"
      - "--serverstransport.insecureskipverify=true"
      # - "--providers.kubernetesingress.ingressclass=traefik"
      # - "--providers.kubernetesingress.ingressendpoint.ip=${LB_INGRESS}"
      # - "--providers.kubernetescrd.endpoint=${LB_INGRESS}"
      # - "--providers.kubernetescrd.endpoint=websecure"
      # - "--providers.kubernetescrd.allowcrossnamespace=true"
      ### Set trusted Proxy IPs for headers
      # - "--entryPoints.websecure.proxyProtocol.insecure=true"
      ### Allow Cloudflare IPs (https://www.cloudflare.com/ips-v4)
      # - "--entryPoints.websecure.forwardedHeaders.insecure=true"
      - >
        --entryPoints.websecure.forwardedHeaders.trustedIPs=10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 173.245.48.0/20,
        103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 141.101.64.0/18, 108.162.192.0/18, 190.93.240.0/20,
        188.114.96.0/20, 197.234.240.0/22, 198.41.128.0/17, 162.158.0.0/15, 104.16.0.0/13, 104.24.0.0/14,
        172.64.0.0/13, 131.0.72.0/22
    env:
      - name: TZ
        value: "${TIMEZONE}"

    # experimental:
    #   plugins:
    #     enabled: true
    logs:
      general:
        level: DEBUG
        # format: json
      access:
        enabled: true # handled in crds kustomization
        # format: json
    metrics:
      prometheus:
        entryPoint: metrics
        addEntryPointsLabels: true
        addRoutersLabels: true
        addServicesLabels: true

    pilot:
      enabled: false

    ports:
      traefik:
        # port: 9000
        expose: true
        exposedPort: 9000
      web:
        # port: 80
        expose: true
        exposedPort: 80
        redirectTo: websecure
      websecure:
        # port: 443
        expose: true
        exposedPort: 443
        tls:
          enabled: true
          options: "default"
      metrics:
        port: 9100
        expose: true
        exposedPort: 9100

      ### valheim
      steam1:
        port: 2456
        expose: true
        exposedPort: 2456
      steam2:
        port: 2457
        expose: true
        exposedPort: 2457
      steam3:
        port: 2458
        expose: true
        exposedPort: 2458

      # mysql:
      #   port: 3306
      #   expose: true
      #   exposedPort: 3306
      # postgresql:
      #   port: 5432
      #   expose: true
      #   exposedPort: 5432

    rbac:
      enabled: true
    # ## Resolves: error while building entryPoint web: error preparing server: error opening listener: listen tcp :80: bind: permission denied
    # ## https://stackoverflow.com/questions/66138370/permission-problem-w-helm3-installation-of-traefik-on-port-80-hostnetwork
    # securityContext:
    #   capabilities:
    #     drop: [ALL]
    #     add: [NET_BIND_SERVICE]
    #   readOnlyRootFilesystem: true
    #   runAsGroup: 65532 # 0
    #   runAsNonRoot: true # false
    #   runAsUser: 65532 # 0

    tlsOptions:
      default:
        minVersion: VersionTLS12
        maxVersion: VersionTLS13
        sniStrict: true
        cipherSuites:
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 # TLS 1.2
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 # TLS 1.2
          - TLS_AES_256_GCM_SHA384 # TLS 1.3
          - TLS_CHACHA20_POLY1305_SHA256 # TLS 1.3
        curvePreferences:
          - CurveP521
          - CurveP384

    tlsStore:
      default:
        defaultCertificate:
          secretName: "${SECRET_DOMAIN/./-}-tls"

    service:
      enabled: true
      type: LoadBalancer
      spec:
        # expects IP only, no netmask
        # externalIPs:
        loadBalancerIP: "${LB_INGRESS}" # this should be the load balancer IP reserved for Ingress
        # externalTrafficPolicy: Local  # Cluster
      # annotations:

    resources:
      requests:
        cpu: 15m
        memory: 50M
      limits:
        memory: 105M

    annotations:
      reloader.stakater.com/search: "true"

    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
