---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 58.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3
  dependsOn:
    - name: local-path-provisioner
      namespace: kube-system
    - name: rook-ceph-cluster
      namespace: rook-ceph
  valuesFrom:
    - kind: ConfigMap
      name: kube-state-metrics-config
      valuesKey: kube-state-metrics.yaml
  values:
    ## ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
    fullnameOverride: kps
    cleanPrometheusOperatorObjectNames: true

    crds:
      enabled: true

    alertmanager:
      enabled: true
      fullnameOverride: alertmanager
      alertmanagerSpec:
        replicas: 3
        retention: 72h
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 1Gi
      # config:  # see alertmanager.yaml configmap
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
        hosts:
          - &host "alertmanager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host

    grafana:
      enabled: false # manage by itself
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes
          multicluster:
            etcd:
              enabled: true

    # coreDns:
    #   enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 10.2.118.23
        - 10.2.118.24
        - 10.2.118.25
    kubeEtcd:
      enabled: true
      endpoints: *cp
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeStateMetrics:
      enabled: true
      # config specified in kube-state-metrics.yaml configmap

    nodeExporter:
      enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node

    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        limits:
          memory: 326M
      prometheusConfigReloader:
        # resource config for prometheusConfigReloader
        resources:
          requests:
            cpu: 5m
            memory: 32M
          limits:
            memory: 32M

    prometheus:
      enabled: true
      fullNameOverride: prometheus
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
        hosts:
          - &host "prometheus.${SECRET_DOMAIN}"
        pathType: Prefix
        tls:
          - hosts:
              - *host
      prometheusSpec:
        image:
          registry: quay.io
          repository: prometheus/prometheus
          tag: v2.51.0-dedupelabels
        podMetadata:
          annotations:
            secret.reloader.stakater.com/reload: &secret thanos-bucket
        podAntiAffinity: soft
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        replicas: 3
        replicaExternalLabelName: __replica__
        scrapeInterval: 1m # Must match interval in Grafana Helm chart

        enableAdminAPI: true
        externalLabels:
          cluster: home-kubernetes
        additionalScrapeConfigsSecret:
          enabled: true
          name: prometheus-additional-scrape-configs
          key: additionalScrapeConfigs

        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false

        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager

        resources:
          requests:
            cpu: 763m
          limits:
            memory: 1500Mi

        retention: 2d
        retentionSize: 8GiB
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: "quay.io/thanos/thanos:${THANOS_VERSION}"
          version: "${THANOS_VERSION#v}"
          objectStorageConfig:
            # renders new secret
            secret:
              type: S3
              config:
                bucket: thanos
                endpoint: rook-ceph-rgw-ceph-objectstore.rook-ceph.svc.cluster.local
                region:
                access_key:
                  valueFrom:
                    secretKeyRef:
                      name: *secret
                      key: AWS_ACCESS_KEY_ID
                secret_key:
                  valueFrom:
                    secretKeyRef:
                      name: *secret
                      key: AWS_SECRET_ACCESS_KEY
            # # use existing secret
            # existingSecret:
            #   name: *secret
            #   key: config
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
