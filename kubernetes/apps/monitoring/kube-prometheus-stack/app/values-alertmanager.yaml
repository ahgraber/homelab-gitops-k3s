---
apiVersion: v1
kind: ConfigMap
metadata:
  name: values-alertmanager
  namespace: monitoring
  annotations:
    reloader.stakater.com/match: "true"
data:
  values.yaml: |
    ## ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
    ## ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/alertmanager/values.yaml
    alertmanager:
      enabled: true

      nameOverride: alertmanager

      ingress:
        main:
          enabled: true
          ingressClassName: nginx
          annotations:
            nginx.ingress.kubernetes.io/whitelist-source-range: |
              10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hosts:
            - host: &host "alertmanager.${SECRET_DOMAIN}"
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - hosts:
                - *host

      alertmanagerSpec:
        # externalUrl: "https://alertmanager.${SECRET_DOMAIN}"
        retention: 72h
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi
        resources:
          requests:
            cpu: 23m
            memory: 53M
          limits:
            memory: 53M

        # tolerations: []
        # nodeSelector: {}

      ## ref: https://prometheus.io/docs/alerting/alertmanager/
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "email"
            email_configs:
              - to: "${SECRET_DEFAULT_EMAIL}"
                from: "${SECRET_SMTP_ADDRESS}"
                smarthost: "${SECRET_SMTP_SRV}:${SECRET_SMTP_PORT}"
                auth_username: "${SECRET_SMTP_USER}"
                auth_password: "${SECRET_SMTP_PWD}"
                # auth_identity: "${SECRET_SMTP_ADDRESS}"
                # auth_secret: "${SECRET_SMTP_PWD}"
                require_tls: true
                # prettier-ignore
                text: >-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}

                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}
                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}

        route:
          # root route with all parameters are inherited by the child routes if they are not overwritten
          receiver: "null"
          group_by: ["alertname", "job"]
          group_wait: 60s
          group_interval: 15m
          repeat_interval: 6h
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
              continue: false
            - receiver: "email"
              matchers:
                - severity = "critical"
              continue: true

        # Inhibition rules allow to mute a set of alerts given that another alert is firing.
        # We use this to mute any warning-level notifications if the same alert is already critical.
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
