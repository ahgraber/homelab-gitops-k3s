---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app miniflux
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 2.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      annotations:
        reloader.stakater.com/auto: "true"

    # controller:
    #   replicas: 3
    #   strategy: RollingUpdate

    image:
      repository: docker.io/miniflux/miniflux
      tag: 2.0.51

    env:
      BASE_URL: "https://miniflux.${SECRET_DOMAIN}"
      CREATE_ADMIN: "1"
      ADMIN_USERNAME:
        valueFrom:
          secretKeyRef:
            name: *app
            key: ADMIN_USERNAME
      ADMIN_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: *app
            key: ADMIN_PASSWORD
      DEBUG: "1"
      LOG_DATE_TIME: "1"
      METRICS_ALLOWED_NETWORKS: "${CLUSTER_CIDR}"
      METRICS_COLLECTOR: "1"
      # OAUTH2_CLIENT_ID: miniflux
      # OAUTH2_CLIENT_SECRET: "${SECRET_MINIFLUX_OAUTH_CLIENT_SECRET}"
      # OAUTH2_USER_CREATION: "1"
      # OAUTH2_OIDC_DISCOVERY_ENDPOINT\: "https://auth.${SECRET_DOMAIN}"
      # OAUTH2_PROVIDER: oidc
      # OAUTH2_REDIRECT_URL: "https://miniflux.${SECRET_DOMAIN}/oauth2/oidc/callback"
      POLLING_SCHEDULER: entry_frequency
      POLLING_FREQUENCY: "15"
      RUN_MIGRATIONS: "1"
      # - name: FETCH_YOUTUBE_WATCH_TIME
      #   value: "1"
      # - name: INVIDIOUS_INSTANCE
      #   value: "yewtu.be"
      POSTGRES_USER:
        valueFrom:
          secretKeyRef:
            name: &db_secret database-miniflux
            key: LOGIN
      POSTGRES_PASS:
        valueFrom:
          secretKeyRef:
            name: *db_secret
            key: PASSWORD
      DATABASE_URL:
        # "postgres://{{ .POSTGRES_USER }}:{{ .POSTGRES_PASS }}@postgres-rw.default.svc.cluster.local/miniflux?sslmode=disable"
        valueFrom:
          secretKeyRef:
            name: *db_secret
            key: POSTGRES_URL

    ingress:
      main:
        enabled: true
        ingressClassName: internal
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host

    service:
      main:
        ports:
          http:
            port: &port 8080
    serviceMonitor:
      main:
        enabled: true
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 60s
            scrapeTimeout: 10s

    probes:
      liveness: &probes
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /healthcheck
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness: *probes
      startup:
        enabled: false

    resources:
      requests:
        cpu: 10m
        memory: 100Mi
      limits:
        memory: 750Mi
