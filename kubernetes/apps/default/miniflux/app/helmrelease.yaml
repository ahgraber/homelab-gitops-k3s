---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app miniflux
spec:
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  interval: 15m
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  driftDetection:
    mode: enabled
    ignore:
      - paths:
          - /spec/containers/resources/limits
        target:
          kind: Pod
  values:
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile: { type: RuntimeDefault }

    controllers:
      miniflux:
        replicas: 2
        strategy: Recreate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/miniflux/miniflux
              tag: 2.1.1-distroless
            env:
              BASE_URL: https://miniflux.${SECRET_DOMAIN}
              PORT: &port 80
              CREATE_ADMIN: "1"
              ADMIN_USERNAME:
                valueFrom:
                  secretKeyRef:
                    name: *app
                    key: ADMIN_USERNAME
              ADMIN_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *app
                    key: ADMIN_PASSWORD
              DEBUG: "1"
              LOG_DATE_TIME: "1"
              METRICS_ALLOWED_NETWORKS: ${CLUSTER_CIDR}
              METRICS_COLLECTOR: "1"
              # OAUTH2_CLIENT_ID: miniflux
              # OAUTH2_CLIENT_SECRET: "${SECRET_MINIFLUX_OAUTH_CLIENT_SECRET}"
              # OAUTH2_USER_CREATION: "1"
              # OAUTH2_OIDC_DISCOVERY_ENDPOINT\: "https://auth.${SECRET_DOMAIN}"
              # OAUTH2_PROVIDER: oidc
              # OAUTH2_REDIRECT_URL: "https://miniflux.${SECRET_DOMAIN}/oauth2/oidc/callback"
              POLLING_SCHEDULER: entry_frequency
              POLLING_FREQUENCY: "15"
              RUN_MIGRATIONS: "1"
              # - name: FETCH_YOUTUBE_WATCH_TIME
              #   value: "1"
              # - name: INVIDIOUS_INSTANCE
              #   value: "yewtu.be"
              POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &db_secret database-miniflux
                    key: LOGIN
              POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *db_secret
                    key: PASSWORD
              DATABASE_URL:
                # "postgres://{{ .POSTGRES_USER }}:{{ .POSTGRES_PASS }}@postgres-rw.default.svc.cluster.local/miniflux?sslmode=disable"
                valueFrom:
                  secretKeyRef:
                    name: *db_secret
                    key: POSTGRES_URL
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /healthcheck
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 100Mi
              limits:
                memory: 750Mi
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
    ingress:
      app:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          # nginx.ingress.kubernetes.io/whitelist-source-range: |
          #   10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
