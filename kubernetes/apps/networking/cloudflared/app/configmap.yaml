---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-argo-tunnel
  namespace: networking
  labels:
    app.kubernetes.io/name: cloudflared
  annotations:
    reloader.stakater.com/match: "true"
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: k8s-argo-tunnel
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    no-autoupdate: true

    # set default configuration for all ingresses
    originRequest:
      # Hostname that cloudflared should expect from your origin server certificate
      originServerName: ${SECRET_DOMAIN}

    # The `ingress` block tells cloudflared which local service to route incoming requests to.
    # To route traffic from the internet to cloudflared, run `cloudflared tunnel route dns k8s-argo-tunnel <hostname>`.
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    ingress:
    ### Proxy traefik to the k8s ingress (Traefik) to hand off to Services
    # internet --> cloudflared tunnel --> local DNS --> ingress --> service
    ### NOTE: relies on split-brain DNS / local overrides
    - hostname: linkding.${SECRET_DOMAIN}
      service: https://traefik.networking.svc.cluster.local:443
    - hostname: miniflux.${SECRET_DOMAIN}
      service: https://traefik.networking.svc.cluster.local:443
    # - hostname: httpbin.${SECRET_DOMAIN}
    #   service: https://traefik.networking.svc.cluster.local:443
    # - hostname: whoami.${SECRET_DOMAIN}
    #   service: https://traefik.networking.svc.cluster.local:443


    ### Proxy traffic to the k8s Services directly
    - hostname: flux-receiver.${SECRET_DOMAIN}
      service: http://webhook-receiver.flux-system:80
    - hostname: ghar-webhook.${SECRET_DOMAIN}
      service: http://actions-runner-controller-github-webhook-server.actions-runner-system:80

    # This rule sends traffic to the built-in hello-world HTTP server. This can help debug connectivity issues.
    # If hello.${SECRET_DOMAIN} resolves and <service>.${SECRET_DOMAIN} does not, then the problem is
    # in the connection from cloudflared to your local service, not from the internet to cloudflared.
    - hostname: "hello.${SECRET_DOMAIN}"
      service: hello_world

    ### "Else" rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
