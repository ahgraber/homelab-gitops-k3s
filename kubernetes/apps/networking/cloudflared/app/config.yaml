---
# Name of the tunnel you want to run
tunnel: k8s-argo-tunnel
credentials-file: /etc/cloudflared/credentials.json
metrics: 0.0.0.0:2000
no-autoupdate: true
originRequest:
  connectTimeout: 30s
  # Hostname that cloudflared should expect from your origin server certificate
  originServerName: ${SECRET_DOMAIN}
warp-routing:
  enabled: false

# The `ingress` block tells cloudflared which local service to route incoming requests to.
# To route traffic from the internet to cloudflared, run:
# ```sh
# cloudflared tunnel route dns k8s-argo-tunnel <hostname>
# ````
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
ingress:
  ### Proxy traefik to the k8s ingress to hand off to Services
  # internet --> cloudflared tunnel --> local DNS --> ingress --> service
  ### NOTE: relies on split-brain DNS / local overrides
  - hostname: echo.${SECRET_DOMAIN}
    service: https://ingress-nginx-controller.networking.svc.cluster.local
  # - hostname: httpbin.${SECRET_DOMAIN}
  #   service: https://ingress-nginx-controller.networking.svc.cluster.local:443
  - hostname: linkding.${SECRET_DOMAIN}
    service: https://ingress-nginx-controller.networking.svc.cluster.local
  - hostname: miniflux.${SECRET_DOMAIN}
    service: https://ingress-nginx-controller.networking.svc.cluster.local
  - hostname: opengist.${SECRET_DOMAIN}
    service: https://ingress-nginx-controller.networking.svc.cluster.local

  ### Proxy traffic to the k8s Services directly
  - hostname: flux-receiver.${SECRET_DOMAIN}
    service: http://webhook-receiver.flux-system:80
  # - hostname: ghar-webhook.${SECRET_DOMAIN}
  #   service: http://actions-runner-controller-github-webhook-server.actions-runner-system:80

  # This rule sends traffic to the built-in hello-world HTTP server. This can help debug connectivity issues.
  # If hello.${SECRET_DOMAIN} resolves and <service>.${SECRET_DOMAIN} does not, then the problem is
  # in the connection from cloudflared to your local service, not from the internet to cloudflared.
  - hostname: "hello.${SECRET_DOMAIN}"
    service: hello_world

  ### "Else" rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
  - service: http_status:404

  # ### Alternatively, fail to sending to ingress
  # - service: https://ingress-nginx-controller.networking.svc.cluster.local:443
