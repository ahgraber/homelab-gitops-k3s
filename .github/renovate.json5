{
  // General RenovateBot configuration
  "enabled": true,
  "timezone": "America/New_York",
  "semanticCommits": "enabled",
  "dependencyDashboard": true,
  "dependencyDashboardTitle": "Renovate Dashboard",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  // set up ignored deps
  "ignoreDeps": [
    "ghcr.io/fluxcd/helm-controller",
    "ghcr.io/fluxcd/image-automation-controller",
    "ghcr.io/fluxcd/image-reflector-controller",
    "ghcr.io/fluxcd/kustomize-controller",
    "ghcr.io/fluxcd/notification-controller",
    "ghcr.io/fluxcd/source-controller",
  ],
  // set up Renovate Managers
  "docker-compose": {
    fileMatch: ["(^|/)docker-compose.*.ya?ml$", "(^|/)docker-compose.*.ya?ml.j2$"],
  },
  "pre-commit": {
    enabled: true,
  },
  "flux": {
    fileMatch: ["cluster/.+\\.ya?ml$"],
  },
  "helm-values": {
    fileMatch: ["cluster/.+\\.ya?ml$"],
  },
  "kubernetes": {
    fileMatch: ["cluster/.+\\.ya?ml$"],
  },
  "regexManagers": [
    // regexManager to read and process HelmRelease files
    {
      fileMatch: ["cluster/.+\\.ya?ml$"],
      matchStrings: [
        // helm releases
        "registryUrl=(?<registryUrl>.*?)\n *chart: (?<depName>.*?)\n *version: (?<currentValue>.*)\n",
      ],
      datasourceTemplate: "helm",
    },
    // regexManager to read and process cert-manager CRD's
    {
      fileMatch: ["cluster/crds/cert-manager/.+\\.ya?ml$"],
      matchStrings: ["registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n.*\\/(?<currentValue>.*?)\\/"],
      datasourceTemplate: "helm",
    },
    // regexManager to read and process external-snapshotter CRD's
    {
      fileMatch: ["cluster/crds/external-snapshotter/.+\\.yaml$"],
      matchStrings: ["datasource=(?<datasource>.*?)\n *url: https://github\\.com/(?<depName>.*?)\\.git\n *ref:\n *tag: (?<currentValue>.*)\n"],
      datasourceTemplate: "github-releases",
    },
    // regexManager to read and process kube-prometheus-stack and velero CRD's
    {
      fileMatch: ["cluster/crds/kube-prometheus-stack/.+\\.yaml$"],
      matchStrings: ["registryUrl=(?<registryUrl>.*?)\n *tag: (?<depName>[a-zA-Z-]+)-(?<currentValue>.*)\n"],
      datasourceTemplate: "helm",
    },
    // regexManager to read and process Traefik CRD's
    {
      fileMatch: ["cluster/crds/traefik/.+\\.ya?ml$"],
      matchStrings: ["registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: v(?<currentValue>.*)\n"],
      datasourceTemplate: "helm",
    },
    // regexManager to read and process velero CRD's
    {
      fileMatch: ["cluster/crds/velero/.+\\.ya?ml$"],
      matchStrings: ["registryUrl=(?<registryUrl>.*?)\n *tag: (?<depName>[a-zA-Z-]+)-(?<currentValue>.*)\n"],
      datasourceTemplate: "helm",
    },
  ],
  "packageRules": [
    // setup datasources
    {
      matchDatasources: ["helm"],
      separateMinorPatch: true,
      ignoreDeprecated: true,
    },
    // global docker datasource settings
    {
      matchDatasources: ["docker"],
      enabled: true,
      commitMessageTopic: "container image {{depName}}",
      commitMessageExtra: "to {{#if isSingleVersion}}v{{{newVersion}}}{{else}}{{{newValue}}}{{/if}}",
      matchUpdateTypes: ["major", "minor", "patch"],
    },
    // add labels according to package and update types
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["major"],
      labels: ["renovate/image", "dep/major"],
    },
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["minor"],
      labels: ["renovate/image", "dep/minor"],
    },
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["patch"],
      labels: ["renovate/image", "dep/patch"],
    },
    {
      matchDatasources: ["helm"],
      matchUpdateTypes: ["major"],
      labels: ["renovate/helm", "dep/major"],
    },
    {
      matchDatasources: ["helm"],
      matchUpdateTypes: ["minor"],
      labels: ["renovate/helm", "dep/minor"],
    },
    {
      matchDatasources: ["helm"],
      matchUpdateTypes: ["patch"],
      labels: ["renovate/helm", "dep/patch"],
    },
  ],
}
