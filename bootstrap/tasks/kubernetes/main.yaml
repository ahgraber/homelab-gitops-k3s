---
- name: Ensure Kubernetes directories exist
  when: item.state == 'directory'
  ansible.builtin.file:
    path: "{{ repository_path }}/kubernetes/{{ item.path }}"
    state: directory
    mode: "0755"
  with_community.general.filetree: ["../templates/kubernetes/"]

- name: Template Kubernetes unencrypted files
  when:
    - item.state == 'file'
    - "'.DS_Store' not in item.path"
    - "'sops' not in item.path"
    - "'custom-settings.yaml.j2' not in item.path"
    - "'custom-secrets.yaml.j2' not in item.path"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ repository_path }}/kubernetes/{{ item.path | regex_replace('.j2$', '') }}"
    mode: "0644"
  with_community.general.filetree: ["../templates/kubernetes/"]

- name: Check if the cluster user settings file already exists
  stat:
    path: "{{ repository_path }}/kubernetes/flux/vars/custom-settings.yaml"
  register: custom_settings

- name: Template Kubernetes user custom settings
  when:
    - item.state == 'file'
    - "'custom-settings.yaml' in item.path"
    - not custom_settings.stat.exists
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ repository_path }}/kubernetes/{{ item.path | regex_replace('.j2$', '') }}"
    mode: "0644"
  with_community.general.filetree: ["../templates/kubernetes/"]

- name: Check if the cluster user secrets file already exists
  stat:
    path: "{{ repository_path }}/kubernetes/flux/vars/custom-secrets.yaml"
  register: custom_secrets

- name: Template Kubernetes user custom secrets
  when:
    - item.state == 'file'
    - "'custom-secrets.yaml' in item.path"
    - not custom_secrets.stat.exists
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ repository_path }}/kubernetes/{{ item.path | regex_replace('.j2$', '') }}"
    mode: "0644"
  with_community.general.filetree: ["../templates/kubernetes/"]

- name: Template Kubernetes encrypted files
  block:
    - name: Template Kubernetes encrypted files
      when: item.state == 'file' and 'sops' in item.path
      community.sops.sops_encrypt:
        path: "{{ repository_path }}/kubernetes/{{ item.path | replace('.j2', '') }}"
        encrypted_regex: ^(data|stringData)$
        age: ["{{ bootstrap_age_public_key }}"]
        content_yaml: "{{ lookup('ansible.builtin.template', item.src) | from_yaml }}"
        mode: "0644"
        force: true
      with_community.general.filetree: ["../templates/kubernetes/"]
